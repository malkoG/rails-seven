class Staffs::<%= camel_controller_name %>Controller < StaffsController
  before_action :set_<%= singular_model_name %>, only: %I[show edit update destroy]
  before_action :load_comments, only: %I[show]

  def index
    @filter_attributes = <%= column_names %>
    @column_attributes = <%= column_names %>

    query_result = <%= singular_model_name.camelize %>Repository.admin_search(params)
    @q, @<%= plural_model_name %> = query_result.values_at(:q, :result)
  end

  def new
    @<%= singular_model_name %> = <%= singular_model_name.camelize %>.new
  end

  def create
    @<%= singular_model_name %> = <%= singular_model_name.camelize %>.new(<%= singular_model_name %>_params)
    @<%= singular_model_name %>.save

    redirect_to staffs_<%= underscore_model_name %>s_path
  end

  def show
    @comment = ActiveAdmin::Comment.new
  end

  def edit
  end

  def update
    redirect_to staffs_<%= underscore_model_name %>s_path
  end

  def destroy
    @<%= singular_model_name %>.destroy

    redirect_to staffs_<%= underscore_model_name %>s_path
  end

  private
    def set_<%= singular_model_name %>
      @<%= singular_model_name %> = <%= singular_model_name.camelize %>.find params[:id]
    end

    def <%= singular_model_name %>_params
      params.require(:<%= singular_model_name %>).permit(<%= column_symbols %>)
    end

    def load_comments
      set_<%= singular_model_name %>
      @comments = ActiveAdmin::Comment.where(resource_type: "<%= singular_model_name.camelize %>", resource_id: @<%= singular_model_name %>.id).order("id asc")
    end
end
